// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: proto/device.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Device_AnaDeviceConnected_FullMethodName          = "/pb.device/AnaDeviceConnected"
	Device_SendToDevice_FullMethodName                = "/pb.device/SendToDevice"
	Device_CloseConn_FullMethodName                   = "/pb.device/CloseConn"
	Device_Server_MaterialList_Request_FullMethodName = "/pb.device/Server_MaterialList_Request"
	Device_RemoteControlRequest_FullMethodName        = "/pb.device/RemoteControlRequest"
	Device_EMTimeSlotPollingPush_FullMethodName       = "/pb.device/EMTimeSlotPollingPush"
)

// DeviceClient is the client API for Device service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeviceClient interface {
	AnaDeviceConnected(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*DeviceOnline, error)
	SendToDevice(ctx context.Context, in *DeviceData, opts ...grpc.CallOption) (*Empty, error)
	CloseConn(ctx context.Context, in *Conn, opts ...grpc.CallOption) (*Empty, error)
	// 服务器请求材料清单数据
	Server_MaterialList_Request(ctx context.Context, in *BidReq, opts ...grpc.CallOption) (*Empty, error)
	// 请求远程控制
	RemoteControlRequest(ctx context.Context, in *RemoteControlReq, opts ...grpc.CallOption) (*RemoteControlResp, error)
	// 服务器下发时段配置数据 载体固定96字节
	EMTimeSlotPollingPush(ctx context.Context, in *EMTimeSlot, opts ...grpc.CallOption) (*Empty, error)
}

type deviceClient struct {
	cc grpc.ClientConnInterface
}

func NewDeviceClient(cc grpc.ClientConnInterface) DeviceClient {
	return &deviceClient{cc}
}

func (c *deviceClient) AnaDeviceConnected(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*DeviceOnline, error) {
	out := new(DeviceOnline)
	err := c.cc.Invoke(ctx, Device_AnaDeviceConnected_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceClient) SendToDevice(ctx context.Context, in *DeviceData, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, Device_SendToDevice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceClient) CloseConn(ctx context.Context, in *Conn, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, Device_CloseConn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceClient) Server_MaterialList_Request(ctx context.Context, in *BidReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, Device_Server_MaterialList_Request_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceClient) RemoteControlRequest(ctx context.Context, in *RemoteControlReq, opts ...grpc.CallOption) (*RemoteControlResp, error) {
	out := new(RemoteControlResp)
	err := c.cc.Invoke(ctx, Device_RemoteControlRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceClient) EMTimeSlotPollingPush(ctx context.Context, in *EMTimeSlot, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, Device_EMTimeSlotPollingPush_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeviceServer is the server API for Device service.
// All implementations must embed UnimplementedDeviceServer
// for forward compatibility
type DeviceServer interface {
	AnaDeviceConnected(context.Context, *Empty) (*DeviceOnline, error)
	SendToDevice(context.Context, *DeviceData) (*Empty, error)
	CloseConn(context.Context, *Conn) (*Empty, error)
	// 服务器请求材料清单数据
	Server_MaterialList_Request(context.Context, *BidReq) (*Empty, error)
	// 请求远程控制
	RemoteControlRequest(context.Context, *RemoteControlReq) (*RemoteControlResp, error)
	// 服务器下发时段配置数据 载体固定96字节
	EMTimeSlotPollingPush(context.Context, *EMTimeSlot) (*Empty, error)
	mustEmbedUnimplementedDeviceServer()
}

// UnimplementedDeviceServer must be embedded to have forward compatible implementations.
type UnimplementedDeviceServer struct {
}

func (UnimplementedDeviceServer) AnaDeviceConnected(context.Context, *Empty) (*DeviceOnline, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnaDeviceConnected not implemented")
}
func (UnimplementedDeviceServer) SendToDevice(context.Context, *DeviceData) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendToDevice not implemented")
}
func (UnimplementedDeviceServer) CloseConn(context.Context, *Conn) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseConn not implemented")
}
func (UnimplementedDeviceServer) Server_MaterialList_Request(context.Context, *BidReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Server_MaterialList_Request not implemented")
}
func (UnimplementedDeviceServer) RemoteControlRequest(context.Context, *RemoteControlReq) (*RemoteControlResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoteControlRequest not implemented")
}
func (UnimplementedDeviceServer) EMTimeSlotPollingPush(context.Context, *EMTimeSlot) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EMTimeSlotPollingPush not implemented")
}
func (UnimplementedDeviceServer) mustEmbedUnimplementedDeviceServer() {}

// UnsafeDeviceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeviceServer will
// result in compilation errors.
type UnsafeDeviceServer interface {
	mustEmbedUnimplementedDeviceServer()
}

func RegisterDeviceServer(s grpc.ServiceRegistrar, srv DeviceServer) {
	s.RegisterService(&Device_ServiceDesc, srv)
}

func _Device_AnaDeviceConnected_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServer).AnaDeviceConnected(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Device_AnaDeviceConnected_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServer).AnaDeviceConnected(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Device_SendToDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServer).SendToDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Device_SendToDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServer).SendToDevice(ctx, req.(*DeviceData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Device_CloseConn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Conn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServer).CloseConn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Device_CloseConn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServer).CloseConn(ctx, req.(*Conn))
	}
	return interceptor(ctx, in, info, handler)
}

func _Device_Server_MaterialList_Request_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServer).Server_MaterialList_Request(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Device_Server_MaterialList_Request_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServer).Server_MaterialList_Request(ctx, req.(*BidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Device_RemoteControlRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoteControlReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServer).RemoteControlRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Device_RemoteControlRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServer).RemoteControlRequest(ctx, req.(*RemoteControlReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Device_EMTimeSlotPollingPush_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EMTimeSlot)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServer).EMTimeSlotPollingPush(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Device_EMTimeSlotPollingPush_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServer).EMTimeSlotPollingPush(ctx, req.(*EMTimeSlot))
	}
	return interceptor(ctx, in, info, handler)
}

// Device_ServiceDesc is the grpc.ServiceDesc for Device service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Device_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.device",
	HandlerType: (*DeviceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AnaDeviceConnected",
			Handler:    _Device_AnaDeviceConnected_Handler,
		},
		{
			MethodName: "SendToDevice",
			Handler:    _Device_SendToDevice_Handler,
		},
		{
			MethodName: "CloseConn",
			Handler:    _Device_CloseConn_Handler,
		},
		{
			MethodName: "Server_MaterialList_Request",
			Handler:    _Device_Server_MaterialList_Request_Handler,
		},
		{
			MethodName: "RemoteControlRequest",
			Handler:    _Device_RemoteControlRequest_Handler,
		},
		{
			MethodName: "EMTimeSlotPollingPush",
			Handler:    _Device_EMTimeSlotPollingPush_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/device.proto",
}
